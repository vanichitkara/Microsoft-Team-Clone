{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/Microsoft Teams Clone (Local)/Microsoft Teams Video Call/client/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(); // const socket = io('http://localhost:5000');\n\nconst socket = io('https://microsoft-teams-video-call.herokuapp.com');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.close();\n  };\n\n  let receivedMediaStream = null;\n\n  function openCamera() {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      myVideo.current.srcObject = mediaStream;\n      receivedMediaStream = mediaStream;\n    });\n  }\n\n  const closeCamera = () => {\n    if (!receivedMediaStream) {\n      errorElem.innerHTML = \"Camera is already closed!\";\n      errorElem.style.display = \"block\";\n    } else {\n      /* MediaStream.getTracks() returns an array of all the \n      MediaStreamTracks being used in the received mediaStream\n      we can iterate through all the mediaTracks and \n      stop all the mediaTracks by calling its stop() method*/\n      receivedMediaStream.getTracks().forEach(mediaTrack => {\n        mediaTrack.stop();\n      });\n      errorElem.innerHTML = \"Camera closed successfully!\";\n      errorElem.style.display = \"block\";\n    }\n  };\n\n  video.addEventListener(\"click\", () => {\n    const enabled = myVideo.getVideoTracks()[0].enabled;\n\n    if (enabled) {\n      myVideo.getVideoTracks()[0] = false;\n      html = `<i class=\"fas fa-video-slash\">`;\n      video.innerHTML = html;\n    } else {\n      myVideo.getVideoTracks()[0] = true;\n      html = `<i class=\"fas fa-video\">`;\n      video.innerHTML = html;\n    }\n  });\n\n  function toggleMic() {\n    if (myVideo.current.srcObject && myVideo.current.srcObject.getAudioTracks().length > 0) {\n      mic_switch = !mic_switch;\n      myVideo.current.srcObject.getAudioTracks()[0].enabled = mic_switch;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      toggleVideo,\n      toggleMic\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"WCD8xviLUIbJyClSRV/B7JoiY/M=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/mac/Desktop/Microsoft Teams Clone (Local)/Microsoft Teams Video Call/client/src/Context.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","ContextProvider","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","name","setName","call","setCall","me","setMe","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivingCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","close","receivedMediaStream","openCamera","mediaStream","closeCamera","errorElem","innerHTML","style","display","getTracks","forEach","mediaTrack","stop","addEventListener","enabled","getVideoTracks","html","toggleMic","getAudioTracks","length","mic_switch","toggleVideo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,aAAa,gBAAGN,aAAa,EAAnC,C,CAEA;;AACA,MAAMO,MAAM,GAAGH,EAAE,CAAC,kDAAD,CAAjB;;AAEA,MAAMI,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACxC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,EAApC;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACmB,EAAD,EAAKC,KAAL,IAAcpB,QAAQ,CAAC,EAAD,CAA5B;AAEA,QAAMqB,OAAO,GAAGpB,MAAM,EAAtB;AACA,QAAMqB,SAAS,GAAGrB,MAAM,EAAxB;AACA,QAAMsB,aAAa,GAAGtB,MAAM,EAA5B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAApC,EACGC,IADH,CACSC,aAAD,IAAmB;AACvBhB,MAAAA,SAAS,CAACgB,aAAD,CAAT;AAEAT,MAAAA,OAAO,CAACU,OAAR,CAAgBC,SAAhB,GAA4BF,aAA5B;AACD,KALH;AAOAxB,IAAAA,MAAM,CAAC2B,EAAP,CAAU,IAAV,EAAiBC,EAAD,IAAQd,KAAK,CAACc,EAAD,CAA7B;AAEA5B,IAAAA,MAAM,CAAC2B,EAAP,CAAU,UAAV,EAAsB,CAAC;AAAEE,MAAAA,IAAF;AAAQpB,MAAAA,IAAI,EAAEqB,UAAd;AAA0BC,MAAAA;AAA1B,KAAD,KAAwC;AAC5DnB,MAAAA,OAAO,CAAC;AAAEoB,QAAAA,eAAe,EAAE,IAAnB;AAAyBH,QAAAA,IAAzB;AAA+BpB,QAAAA,IAAI,EAAEqB,UAArC;AAAiDC,QAAAA;AAAjD,OAAD,CAAP;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;;AAeA,QAAME,UAAU,GAAG,MAAM;AACvB7B,IAAAA,eAAe,CAAC,IAAD,CAAf;AAEA,UAAM8B,IAAI,GAAG,IAAIpC,IAAJ,CAAS;AAAEqC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,OAAO,EAAE,KAA7B;AAAoC7B,MAAAA;AAApC,KAAT,CAAb;AAEA2B,IAAAA,IAAI,CAACP,EAAL,CAAQ,QAAR,EAAmBU,IAAD,IAAU;AAC1BrC,MAAAA,MAAM,CAACsC,IAAP,CAAY,YAAZ,EAA0B;AAAEP,QAAAA,MAAM,EAAEM,IAAV;AAAgBE,QAAAA,EAAE,EAAE5B,IAAI,CAACkB;AAAzB,OAA1B;AACD,KAFD;AAIAK,IAAAA,IAAI,CAACP,EAAL,CAAQ,QAAR,EAAmBH,aAAD,IAAmB;AACnCR,MAAAA,SAAS,CAACS,OAAV,CAAkBC,SAAlB,GAA8BF,aAA9B;AACD,KAFD;AAIAU,IAAAA,IAAI,CAACH,MAAL,CAAYpB,IAAI,CAACoB,MAAjB;AAEAd,IAAAA,aAAa,CAACQ,OAAd,GAAwBS,IAAxB;AACD,GAhBD;;AAkBA,QAAMM,QAAQ,GAAIZ,EAAD,IAAQ;AACvB,UAAMM,IAAI,GAAG,IAAIpC,IAAJ,CAAS;AAAEqC,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,OAAO,EAAE,KAA5B;AAAmC7B,MAAAA;AAAnC,KAAT,CAAb;AAEA2B,IAAAA,IAAI,CAACP,EAAL,CAAQ,QAAR,EAAmBU,IAAD,IAAU;AAC1BrC,MAAAA,MAAM,CAACsC,IAAP,CAAY,UAAZ,EAAwB;AAAEG,QAAAA,UAAU,EAAEb,EAAd;AAAkBc,QAAAA,UAAU,EAAEL,IAA9B;AAAoCR,QAAAA,IAAI,EAAEhB,EAA1C;AAA8CJ,QAAAA;AAA9C,OAAxB;AACD,KAFD;AAIAyB,IAAAA,IAAI,CAACP,EAAL,CAAQ,QAAR,EAAmBH,aAAD,IAAmB;AACnCR,MAAAA,SAAS,CAACS,OAAV,CAAkBC,SAAlB,GAA8BF,aAA9B;AACD,KAFD;AAIAxB,IAAAA,MAAM,CAAC2B,EAAP,CAAU,cAAV,EAA2BI,MAAD,IAAY;AACpC3B,MAAAA,eAAe,CAAC,IAAD,CAAf;AAEA8B,MAAAA,IAAI,CAACH,MAAL,CAAYA,MAAZ;AACD,KAJD;AAMAd,IAAAA,aAAa,CAACQ,OAAd,GAAwBS,IAAxB;AACD,GAlBD;;AAoBA,QAAMS,SAAS,GAAG,MAAM;AACtBrC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAW,IAAAA,aAAa,CAACQ,OAAd,CAAsBmB,OAAtB;AAEAC,IAAAA,MAAM,CAACC,KAAP;AACD,GAND;;AASA,MAAIC,mBAAmB,GAAG,IAA1B;;AAEA,WAASC,UAAT,GAAsB;AACR9B,IAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAApC,EACKC,IADL,CACU0B,WAAW,IAAI;AAEjBlC,MAAAA,OAAO,CAACU,OAAR,CAAgBC,SAAhB,GAA4BuB,WAA5B;AAEAF,MAAAA,mBAAmB,GAAGE,WAAtB;AAEH,KAPL;AASH;;AAGD,QAAMC,WAAW,GAAG,MAAM;AACtB,QAAI,CAACH,mBAAL,EAA0B;AACtBI,MAAAA,SAAS,CAACC,SAAV,GAAsB,2BAAtB;AACAD,MAAAA,SAAS,CAACE,KAAV,CAAgBC,OAAhB,GAA0B,OAA1B;AACH,KAHD,MAGO;AACnB;AACJ;AACA;AACA;AACoBP,MAAAA,mBAAmB,CAACQ,SAApB,GAAgCC,OAAhC,CAAwCC,UAAU,IAAI;AAClDA,QAAAA,UAAU,CAACC,IAAX;AACH,OAFD;AAGAP,MAAAA,SAAS,CAACC,SAAV,GAAsB,6BAAtB;AACAD,MAAAA,SAAS,CAACE,KAAV,CAAgBC,OAAhB,GAA0B,OAA1B;AACH;AACJ,GAfD;;AAkBVjC,EAAAA,KAAK,CAACsC,gBAAN,CAAuB,OAAvB,EAAgC,MAAM;AACpC,UAAMC,OAAO,GAAE7C,OAAO,CAAC8C,cAAR,GAAyB,CAAzB,EAA4BD,OAA3C;;AACA,QAAGA,OAAH,EAAW;AACT7C,MAAAA,OAAO,CAAC8C,cAAR,GAAyB,CAAzB,IAA4B,KAA5B;AACAC,MAAAA,IAAI,GAAE,gCAAN;AACAzC,MAAAA,KAAK,CAAC+B,SAAN,GAAgBU,IAAhB;AACD,KAJD,MAKI;AACF/C,MAAAA,OAAO,CAAC8C,cAAR,GAAyB,CAAzB,IAA4B,IAA5B;AACAC,MAAAA,IAAI,GAAE,0BAAN;AACAzC,MAAAA,KAAK,CAAC+B,SAAN,GAAgBU,IAAhB;AACD;AACF,GAZD;;AAcA,WAASC,SAAT,GAAqB;AACnB,QAAGhD,OAAO,CAACU,OAAR,CAAgBC,SAAhB,IAA6BX,OAAO,CAACU,OAAR,CAAgBC,SAAhB,CAA0BsC,cAA1B,GAA2CC,MAA3C,GAAoD,CAApF,EAAsF;AACpFC,MAAAA,UAAU,GAAG,CAACA,UAAd;AAEAnD,MAAAA,OAAO,CAACU,OAAR,CAAgBC,SAAhB,CAA0BsC,cAA1B,GAA2C,CAA3C,EAA8CJ,OAA9C,GAAwDM,UAAxD;AACD;AACF;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC7BvD,MAAAA,IAD6B;AAE7BR,MAAAA,YAF6B;AAG7BY,MAAAA,OAH6B;AAI7BC,MAAAA,SAJ6B;AAK7BT,MAAAA,MAL6B;AAM7BE,MAAAA,IAN6B;AAO7BC,MAAAA,OAP6B;AAQ7BL,MAAAA,SAR6B;AAS7BQ,MAAAA,EAT6B;AAU7B2B,MAAAA,QAV6B;AAW7BG,MAAAA,SAX6B;AAY7BV,MAAAA,UAZ6B;AAa7BkC,MAAAA,WAb6B;AAc7BJ,MAAAA;AAd6B,KAA/B;AAAA,cAiBG7D;AAjBH;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAtJD;;GAAMD,e;;KAAAA,e;AAwJN,SAASA,eAAT,EAA0BF,aAA1B","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\n\nconst SocketContext = createContext();\n\n// const socket = io('http://localhost:5000');\nconst socket = io('https://microsoft-teams-video-call.herokuapp.com');\n\nconst ContextProvider = ({ children }) => {\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then((currentStream) => {\n        setStream(currentStream);\n\n        myVideo.current.srcObject = currentStream;\n      });\n\n    socket.on('me', (id) => setMe(id));\n\n    socket.on('callUser', ({ from, name: callerName, signal }) => {\n      setCall({ isReceivingCall: true, from, name: callerName, signal });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n\n    const peer = new Peer({ initiator: false, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      socket.emit('answerCall', { signal: data, to: call.from });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    peer.signal(call.signal);\n\n    connectionRef.current = peer;\n  };\n\n  const callUser = (id) => {\n    const peer = new Peer({ initiator: true, trickle: false, stream });\n\n    peer.on('signal', (data) => {\n      socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\n    });\n\n    peer.on('stream', (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    socket.on('callAccepted', (signal) => {\n      setCallAccepted(true);\n\n      peer.signal(signal);\n    });\n\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n\n    connectionRef.current.destroy();\n\n    window.close();\n  };\n\n  \n  let receivedMediaStream = null;\n\n  function openCamera() {\n                navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n                    .then(mediaStream => {\n                        \n                        myVideo.current.srcObject = mediaStream;\n      \n                        receivedMediaStream = mediaStream;\n      \n                    })\n\n            }\n      \n      \n            const closeCamera = () => {\n                if (!receivedMediaStream) {\n                    errorElem.innerHTML = \"Camera is already closed!\";\n                    errorElem.style.display = \"block\";\n                } else {\n    /* MediaStream.getTracks() returns an array of all the \n    MediaStreamTracks being used in the received mediaStream\n    we can iterate through all the mediaTracks and \n    stop all the mediaTracks by calling its stop() method*/\n                    receivedMediaStream.getTracks().forEach(mediaTrack => {\n                        mediaTrack.stop();\n                    });\n                    errorElem.innerHTML = \"Camera closed successfully!\"\n                    errorElem.style.display = \"block\";\n                }\n            }\n\n\n  video.addEventListener(\"click\", () => {\n    const enabled= myVideo.getVideoTracks()[0].enabled;\n    if(enabled){\n      myVideo.getVideoTracks()[0]=false;\n      html=`<i class=\"fas fa-video-slash\">`;\n      video.innerHTML=html;\n    }\n    else{\n      myVideo.getVideoTracks()[0]=true;\n      html=`<i class=\"fas fa-video\">`;\n      video.innerHTML=html;\n    }\n  });\n  \n  function toggleMic() {\n    if(myVideo.current.srcObject && myVideo.current.srcObject.getAudioTracks().length > 0){\n      mic_switch = !mic_switch;\n  \n      myVideo.current.srcObject.getAudioTracks()[0].enabled = mic_switch;\n    }\n  }     \n\n  return (\n    <SocketContext.Provider value={{\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      toggleVideo,\n      toggleMic,\n    }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport { ContextProvider, SocketContext };\n"]},"metadata":{},"sourceType":"module"}